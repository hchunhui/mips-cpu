#title 五流水MIPS CPU实现
#author PB09210183 何春晖 PB09210174 林晗 PL09215001 切瑞
#date 2012.06.18

* 总体设计
** 指令集
以标准MIPS指令集作为基准，提取出其中？31？条指令进行实现。

** 设计框图

最终实现如图1。图中虚线为控制信号，实线为数据通路。

[[mips_cpu/mips.png][五流水MIPS CPU框图]]

将要实现的CPU共分为五个阶段，各个从左往右阶段的功能依次为：
    - 取指令：将指令从指令Cache中取出，并计算下一条指令的地址；
    - 读操作数及转移：根据指令从寄存器中读出操作数，同时若为转移类指令，满足转移条件时设置PC；
    - 执行：根据指令进行计算，若为存取类指令，则计算地址；
    - 访问存储器：若为存取类指令，对进行数据Cache进行读写；
    - 写结果：将执行或存取的结果写回寄存器。

其中指令Cache和数据Cache实现时看作两个分立存储器。因此该CPU结构属哈佛结构。

全系统没有集中的控制器，而是将IR传递到各个阶段，由各个阶段自行根据需要译码。

此结构图与一般可查的图略有不同，原因将在后面予以解释。

* 部件设计
** 寄存器堆

** 运算器

** 中断模块

** 转发模块
为了克服流水线的数据相关，需要实现数据转发。

转发模块的原理很简单，就是在读操作数时，将欲读取的端口号与后面三个阶段的输出端口号相比。若出现相同，则选择相同的那个阶段的输出，否则才选择寄存器的值。

需要注意的是，MIPS规定0号寄存器的值永远是零，对其写值全忽略。因此若欲读取的端口号为0时，总是选择寄存器的值（零）。

* 流水阶段的操作
** 取指令
此阶段要做的微操作为：
<example>
npc = pc + 4
if not jmp
    pc <- npc
    ir <- icache[pc]
else
    pc <- jmp_addr + 4
    ir <- icache[jmp_addr]
endif
</example>

** 读操作数及转移
此阶段要做的微操作为：
<example>
//读操作数
tmp_a = reg[ir[25:21]]
tmp_b = reg[ir[20:16]]

//转发
for_a = forward(tmp_a)
foe_b = forward(tmp_b)

//判断转移
r = for_a - for_b
if    (ir == beq and r == 0)
   or (ir == bne and r != 0) then
     jmp = 1
     jmp_addr = npc + SEXT(ir[15:0] << 2)
else if ir == jal or == j then
     jmp = 1
     jmp_addr = {npc[31:28], ir[25:0] << 2}
else if ir == jr then
     jmp = 1
     jmp_addr = for_a
else
     jmp = 0
endif
</example>

一般的设计是将转移放在执行阶段进行的，但是MIPS规定转移时只能有 **一个分支延迟槽**。故若在执行阶段才判断转移，流水线中已经有两条转移之后的指令，不满足要求，除非清空流水线。

将转移判断放在此阶段， **虽然增加了几个运算部件，但是却可以保证转移时流水线只有一条后面的指令，从而不需清流水线，从而提高效率**。

还要注意的是，若读存储器指令后紧接着对读入数据的运算指令，该运算指令无论怎么转发，都不能得到正确的值。这种情况MIPS称 **加载延迟**，并且禁止出现这种指令序列。因此这虽然是一个问题，但是不需要特殊处理。

** 执行
此阶段对指令译码并做相应运算。

** 访问存储器
此阶段需要判断是否为存取类指令。若不是，直接向下一级传递；否则，发读写令并选择结果。

** 写结果
此阶段将结果写回寄存器。


* 仿真测试
** 测试一：final_test
这是全指令测试程序。测试程序事先已经在SPIM虚拟机上运行，供仿真比较。

虚拟机结果、仿真结果如图2、图3。

[[mips_cpu/result/final-spim.png][final_test虚拟]]
[[mips_cpu/result/final-sim.png][final_test仿真]]

结果正确。

** 测试二：test
这个程序仅仅对C编译器会产生的指令进行了测试。重点考察了数据转发、分支延迟等情况。

虚拟机结果、仿真结果如图4、图5。

[[mips_cpu/result/test-spim.png][test虚拟]]
[[mips_cpu/result/test-sim.png][test仿真]]

结果正确。

** 测试三：C程序
这组测试程序机器码均由C编译器产生[1]。测试内容分别为fib（斐波那契数列）、heapsort（堆排序）、quicksort（快速排序）。

虚拟机结果、仿真结果如图6、图7、图8、图9、图10、图11。

[[mips_cpu/result/fib-spim.png][fib虚拟]]
[[mips_cpu/result/fib-sim.png][fib仿真]]

[[mips_cpu/result/heapsort-spim.png][heapsort虚拟]]
[[mips_cpu/result/heapsort-sim.png][heapsort仿真]]

[[mips_cpu/result/quicksort-spim.png][quicksort虚拟]]
[[mips_cpu/result/quicksort-sim.png][quicksort仿真]]

后面两个测试虚拟机的结果比仿真多出来的是数据段的初始内容，不影响结果的正确性。

Footnotes:
[1] 这是在编译原理实验构造的C编译器，仅仅支持C语言的一个很小的子集。

* 下载测试
使用download2模板代入并下载。代入时要注意的是，要根据情况删减不用的信号。否则，实验系统报读存错误。

下载结果与仿真相同，这里只说明中断的情况。

外部中断绑定在试验台的一个按键上，按键按下时触发中断。

首先载入test测试程序。为了看清触发过程，启动单拍调试。按下按键不放，同时单拍，如图12，可见PC变为0x404，进入中断服务程序。

[[mips_cpu/result/inte0.png][进入中断处理]]

继续单拍，直到返回原程序。读内存，如图13红字，可见运行正常。
[[mips_cpu/result/inte.png][中断处理结束]]

* 总结

